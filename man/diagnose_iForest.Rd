% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/diagnose_iForest.R
\name{diagnose_iForest}
\alias{diagnose_iForest}
\title{PCA Anomaly Scores via Isolation Forests with Visualization}
\usage{
diagnose_iForest(
  reference_sce,
  query_sce,
  reference_labels,
  query_labels,
  n_pca = 10,
  n_hvg = 2000,
  n_tree = 100,
  anomaly_treshold = 0.5,
  verbose = FALSE,
  store_plots = TRUE,
  ...
)
}
\arguments{
\item{reference_sce}{A SingleCellExperiment object containing the reference data.}

\item{query_sce}{A SingleCellExperiment object containing the query data.}

\item{reference_labels}{A vector of labels for the reference data.}

\item{query_labels}{A vector of labels for the query data.}

\item{n_pca}{An integer specifying the number of principal components to use. Default is 10.}

\item{n_hvg}{An integer specifying the number of highly variable genes to use. Default is 2000.}

\item{n_tree}{An integer specifying the number of trees for the isolation forest. Default is 100.}

\item{anomaly_treshold}{A numeric value specifying the threshold for identifying outliers. Default is 0.5.}

\item{verbose}{A logical value indicating whether to print verbose output. Default is FALSE.}

\item{store_plots}{A logical value indicating whether to store PCA anomaly plots. Default is TRUE.}

\item{...}{Additional arguments passed to the `isolation.forest` function.}
}
\value{
A list containing the results for each cell type, including anomaly scores, outlier IDs, PCA data, and 
optional PCA anomaly plots.
}
\description{
\code{diagnose_iForest} performs diagnostics using isolation forest with PCA and visualization. 
It takes reference and query SingleCellExperiment objects, their corresponding labels, and various parameters to perform the analysis. 
The function returns a list containing the results for each cell type, including anomaly scores, outlier IDs, PCA data, 
and optional PCA anomaly plots.
}
\details{
This function first gets common genes between the reference and query data, and then applies log normalization to the expression data. 
It selects highly variable genes from the reference data and extracts the expression data and labels.
The function then applies PCA to the entire reference expression data and predicts PCA scores for the query data. 
It builds isolation forests and performs diagnostics for each cell type, calculating anomaly scores for the query data.
The function also provides optional analysis of anomaly scores and creates a list of output for each cell type, 
including PCA anomaly plots if `store_plots` is set to TRUE. 
Finally, it returns a list containing the results for each cell type.
Isolation Forest is an algorithm for anomaly detection that works by building an ensemble of isolation trees. It is based on the 
idea that anomalies are more susceptible to isolation than normal instances.
The part where we project the query data onto the PCA space of the reference data is done by using the `predict` function on the PCA model with the query expression data. This allows us to transform the query data into the same PCA space as the reference data, which is necessary for the isolation forest analysis.
}
\examples{
# Load data
sce <- scRNAseq::HeOrganAtlasData(tissue = c("Marrow"), ensembl = FALSE)

# Divide the data into reference and query datasets
set.seed(100)
indices <- sample(ncol(assay(sce)), size = floor(0.7 * ncol(assay(sce))), replace = FALSE)
ref_data <- sce[, indices]
query_data <- sce[, -indices]

# log transform datasets
ref_data <- scuttle::logNormCounts(ref_data)
query_data <- scuttle::logNormCounts(query_data)

# Cell type annotation via SingleR (or any other cell type annotation method)
scores <- SingleR::SingleR(query_data, ref_data, labels = ref_data$reclustered.broad)
# Add labels to query object
colData(query_data)$labels <- scores$labels

# Store PCA anomaly data and plots
iForest_output <- diagnose_iForest(reference_sce = ref_data, query_sce = query_data, 
                                   reference_labels = ref_data$reclustered.broad, query_labels = query_data$labels,
                                   n_pca = 10,
                                   n_hvg = 2000,
                                   n_tree = 100,
                                   anomaly_treshold = 0.5,
                                   verbose = FALSE,
                                   store_plots = TRUE)

# Plot results for CD4
plot_list <- list(iForest_output$CD4$PC_plots$PC1_PC2, iForest_output$CD4$PC_plots$PC3_PC4, 
                  iForest_output$CD4$PC_plots$PC5_PC6, iForest_output$CD4$PC_plots$PC7_PC8)
gridExtra::grid.arrange(grobs = plot_list, ncol = 2)#' 

}
\author{
Anthony Christidis, \email{anthony-alexander_christidis@hms.harvard.edu}
}
